      동물

↗            ↖
개           고양이


개는 동물의 상속을 받음
고양이도 동물의 상속을 받음

개와 고양이는 동물 이라는 공동점이 있지만
스스로의 특징도 있음.

이때 동물을 부모클래스
개와 고양이를 자식클래스


상속은 반드시 하나의 부모클래스의 것만 상속 받을 수 있다.

참새라는 녀석은 동물클래스와 새클래스 둘중에 단 하나의 클래스만 받을 수 있다.



class Animal {
    String name;

    public void cry() {
        System.out.println(name + " is crying.");
    }
}

class Dog extends Animal {
    Dog(String name) {
        this.name = name;
    }

    public void swim() {
        System.out.println(name + " is swimming.");
    }
}

public class Main {
    public static void main(String[] args) {
        Dog dog = new Dog("코코");
        dog.cry();
        dog.swim();

        Animal dog2 = new Dog("미미");
        dog2.cry();
//        dog2.swim(); <----- swim은 Dog 에는 있지만 Animal 에는 따로 지정을 안해줘서 컴파일 오류날거임. 

    }
}

>> 코코 is crying.
코코 is swimming.
미미 is crying.








<overloading>
한 클래스 내에서 동일한 이름의 메소드를 여러 개 갖는 것.
그렇다고 이름이 같다고 무조건 오버로딩은 아님.

조건1: 메소드 이름이 동일해야한다.
조건2: 매개 변수의 개수나 또는 type이 달라야 한다.





public class Main {
    public static void main(String[] args) {
        // write your code here

    }

    int add(int x, int y, int z) {
        return x+y+z;
    }

    long add(int a, int b, int c) {
        return a+b+c;
    }
}


한 클래스 내에 매개 변수의 이름은 상관없다. 매개변수의 개수가(파라미터 내의 int라고 된부분)
3개로 같다. 조건2가 걸린다. 리턴 타입이 하나는 int고 하나는 long으로 다르다. 
타입은 다르니까 괜찮지 않나? return type이 다른경우는 오버로딩으로 치지않는다. 
따라서 이렇게 정의할 수 없다고 컴파일에러가 뜬다.

잘 작동되게 조건을 맞춰보자. 매개변수의 개수를 다르게해보자.
long 리턴타입의 매개변수 중에 int c 를 지워볼까


public class Main {
    public static void main(String[] args) {
        // write your code here

    }

    int add(int x, int y, int z) {
        return x+y+z;
    }

    long add(int a, int b) {
        return a+b;
    }
}

이제 빨간줄 사라지고 잘됨.
add 라고 이름은 같고 매개변수의 개수가 다르기 때문에 오버로딩이 된것.
개수는 같지만 타입이 다르게하면 어떰?
이번엔 int c 를 long c 로 바꿔보자


public class Main {
    public static void main(String[] args) {
        // write your code here

    }

    int add(int x, int y, int z) {
        return x+y+z;
    }

    int add(int a, int b, long c) {
        return a+b+c;
    }
}
응 잘돼.

















<overriding>
부모의 class 로 부터 상속받은 메소드, 부모클래스에 있는 메소드를 똑같이 자식클래스에 정의하는것.
그것을 덮어버리는것. 그래서 부모에 있던 원래 함수내용은 없는 셈 치는것.



부모클래스를 정의해보자

class Animal {
    String name;
    String color;

    public Animal(String name) {
        this.name = name;
    }

    public void cry() {
        System.out.println(name + " is crying.");
    }
}
부모클래스나 자식클래스는 cry() 함수 호출시 이름 + is crying 이 출력될것이다. 그런데 이때!
자식클래스를 만들어주는 과정에서

class Dog extends Animal {
    public Dog(String name) {
        super(name);
    }

    public void cry() {
        System.out.println(name + " is barking.");
    }
}

어?? cry() 함수를 자식도 따로 갖고있네?
뭐 자식클래스는 부모클래스거 에다가 자신의 특징적인거도 갖고있으니 그럴 수 있겠지.
야 그럼 cry() 함수 호출하면 누구꺼 적용됨? 부모? 자식?

자식꺼지 이놈아. 그게 바로 오버라이딩. 덮어씌워버린것.




public class Main {
    public static void main(String[] args) {
        // write your code here
        Animal dog = new Dog("코코");
        dog.cry();
    }

}

>> 코코 is barking.

























정리!!!!!!!!!!!!!!!!!!
overloading은 기존에 없는 새로운 메소드를 정의하는데 같은 이름을 가지는 함수를 정의한다.
overriding은 부모에 있는 똑같은 함수를 자식이 구현해서 부모에 있는 함수를 덮어서 자기꺼가 나오게 하는것.



